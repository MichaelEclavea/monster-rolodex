{"version":3,"sources":["components/cards/Cards.jsx","components/card-list/CardList.jsx","components/search-box/SearchBox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Cards","monster","className","alt","src","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","filteredMonsters","fetch","then","response","json","users","setState","this","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAaeA,EAVD,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACb,OACI,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAQI,GAAlC,4BACtB,6BAAKJ,EAAQK,OACb,6BAAKL,EAAQM,YCMNC,G,MAXE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEhB,OACI,qBAAKP,UAAU,YAAf,SACCO,EAASC,KAAI,SAAAT,GAAO,OACjB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQI,WCMhBM,G,MAXG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAC9B,OACI,uBACAX,UAAU,SACVY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCJGG,E,kDACnB,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXR,SAAU,GACVS,YAAa,GACbC,iBAAkB,IALR,E,qDASd,WAAoB,IAAD,OACjBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKC,SAAS,CAAEhB,SAAUe,S,oBAG/C,WAAS,IAAD,SAC2BE,KAAKT,MAA/BR,EADD,EACCA,SAAUS,EADX,EACWA,YACXC,EAAmBV,EAASkB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQK,KAAKsB,cAAcC,SAASX,EAAYU,kBAGlD,OACE,sBAAK1B,UAAU,MAAf,UACA,iDACA,cAAC,EAAD,CACEU,YAAa,kBACbC,aAAc,SAACiB,GAAD,OAAO,EAAKL,SAAS,CAAEP,YAAaY,EAAEC,OAAOC,WAE7D,qBAAK9B,UAAU,kBAAf,SACA,cAAC,EAAD,CAAUO,SAAWU,GAAmBV,a,GA9BbwB,aCOlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1196c25c.chunk.js","sourcesContent":["import React from 'react'\nimport './cards.css'\n\nconst Cards = ({ monster }) => {\n    return(\n        <div className='card-container'>\n        <img alt='monster' src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}/>\n        <h2>{monster.name}</h2>\n        <h3>{monster.email}</h3>\n        </div>\n    )\n}\n\nexport default Cards;","import React from 'react'\nimport Card from '../cards/Cards'\nimport './card-list.css'\nconst CardList = ({ monsters }) => {\n\n    return (\n        <div className='card-list'>\n        {monsters.map(monster => (\n            <Card key={monster.id} monster={monster} />\n        ))}\n        </div>\n    )\n}\n\nexport default CardList","import React from 'react'\nimport './search-box.css'\n\nconst SearchBox = ({ placeholder, handleChange }) => {\n    return (\n        <input \n        className='search'\n        type='search'\n        placeholder={placeholder}\n        onChange={handleChange}\n        />\n    )\n}\n\nexport default SearchBox;","import './App.css'\nimport React, { Component } from 'react'\nimport CardList from './components/card-list/CardList'\nimport SearchBox from './components/search-box/SearchBox'\n\nexport default class App extends Component{\n  constructor() {\n    super ();\n    this.state = {\n      monsters: [],\n      searchField: '',\n      filteredMonsters: [],\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }))\n  }\n\n  render(){\n    const {monsters, searchField}  = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n  \n    return (\n      <div className=\"App\">\n      <h1>Monster Rolodex</h1>\n      <SearchBox\n        placeholder={'search monsters'}\n        handleChange={(e) => this.setState({ searchField: e.target.value })}\n      />\n      <div className='cards-container'>\n      <CardList monsters={!filteredMonsters ? monsters : filteredMonsters} />\n      </div>\n    </div>\n    )\n  }\n}\n\n// function App() {\n//   const [monsters, setMonsters] = useState([])\n//   const [searchField, setSearchField] = useState('')\n//   const [filteredMonsters, setFilteredMonsters] = useState()\n\n//   useEffect(() => {\n//     fetch('https://jsonplaceholder.typicode.com/users')\n//       .then((response) => response.json())\n//       .then((users) => setMonsters(users))\n//   }, [filteredMonsters, searchField])\n\n//   const renderFilter = () => {\n//     console.log(searchField)\n//     setFilteredMonsters(\n//       monsters.filter((monster) =>\n//         monster.name.toLowerCase().includes(searchField.toLowerCase())\n//       )\n//     )\n//   }\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Monster Rolodex</h1>\n//       <SearchBox\n//         placeholder={'search monsters'}\n//         handleChange={(e) => setSearchField(e.target.value, renderFilter())}\n//       />\n//       <CardList monsters={!filteredMonsters ? monsters : filteredMonsters} />\n//     </div>\n//   )\n// }\n\n// export default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}